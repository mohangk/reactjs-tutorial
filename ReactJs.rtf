{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red56\green56\blue56;\red247\green247\blue247;\red67\green67\blue67;
\red33\green118\blue199;\red246\green243\blue231;\red81\green105\blue113;\red115\green138\blue4;\red45\green132\blue123;
\red129\green144\blue144;\red56\green56\blue56;\red247\green247\blue247;\red67\green67\blue67;\red0\green0\blue0;
\red177\green70\blue60;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs30 \cf0 Interesting JS developments:\

\b0 - browserify\
- react\
- ES6 Objects
\b \

\fs38 \
React(Virtual)DOM & Synthatic events\
\
Why ?\

\b0  - the ability to inject components into an existing page\
 - removing concerns around event management, leaking views, model <-> view binding infinite loops, efficiently rendering views\
 - template vs view logic - separate?, now in one 
\b \
\pard\pardeftab720\sl320\sa200

\f1\b0\fs24 \cf2 \cb3 - React is so fast because it never talks to the DOM directly. React maintains a fast in-memory representation of the DOM. 
\f2\fs20 \cf4 \cb0 render()
\f1\fs24 \cf2 \cb3  methods return a 
\i description
\i0  of the DOM, and React can diff this description with the in-memory representation to compute the fastest way to update the browser.\
- Additionally, React implements a full synthetic event system such that all event objects are guaranteed to conform to the W3C spec despite browser quirks, and everything bubbles consistently and in a performant way cross-browser. You can even use some HTML5 events in IE8!\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs30 \cf0 \cb1 - Interesting use of ES7 syntax\
 rest & spread properties\
  \'85this.props\
\
\pard\pardeftab720\sl240

\f2\fs26 \cf5 \cb6 var\cf7  \{ x, y, ...z \} \cf8 =\cf7  \{ x\cf8 :\cf7  \cf9 1\cf7 , y\cf8 :\cf7  \cf9 2\cf7 , a\cf8 :\cf7  \cf9 3\cf7 , b\cf8 :\cf7  \cf9 4\cf7  \};\
x; \cf10 // 1\cf7 \
y; \cf10 // 2\cf7 \
z; \cf10 // \{ a: 3, b: 4 \}\
\pard\pardeftab720\sl240

\f0\b\fs30 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs38 \cf0 Important concepts\

\fs30 \

\fs40 JSX
\b0\fs30 \
 - syntactic sugar that allows the mingling of xml and JS \
\pard\pardeftab720\sl320

\f1\fs24 \cf2 \cb3 Specifically you can 
\i separate the different concerns
\i0  of your app however you please simply by building new components. By building a custom component library for your application, you are expressing your UI in a way that best fits your domain.
\f0 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs30 \cf0 \
\pard\pardeftab720\sl260

\f1\fs24 \cf11 \cb12 We strongly believe that components are the right way to separate concerns rather than "templates" and "display logic." We think that markup and the code that generates it are intimately tied together. Additionally, display logic is often very complex and using template languages to express it becomes cumbersome.	\
\
\pard\pardeftab720\sl260\sa200

\b \cf11 JSX lets you create JavaScript objects using HTML syntax.
\b0  To generate a link in React using pure JavaScript you'd write:\
\pard\pardeftab720\sl280\sa200

\f2\fs20 \cf13 \cb14 React.createElement('a', \{href: 'http://facebook.github.io/react/'\}, 'Hello!')
\f1\fs24 \cf11 \cb12 \
\pard\pardeftab720\sl260\sa200
\cf11 With JSX this becomes:\
\pard\pardeftab720\sl280\sa200

\f2\fs20 \cf13 \cb14 <a href="http://facebook.github.io/react/">Hello!</a>
\f0\fs30 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0  - define logic via attributes on the components (onChange, onClick, className)
\b \

\b0  - handles DOM manipulation through special logic (resolution) - leakage\
 - JSX spread attributes\
\pard\pardeftab720\sl240

\f2\fs26 \cf7 \cb6   ...\cf8 this\cf7 .props\

\f0\fs30 \cf0 \cb1    
\f2\fs26 \cf5 \cb6 var\cf7  \{ checked, ...other \} \cf8 =\cf7  \cf8 this\cf7 .props;\
\pard\pardeftab720\sl240
\cf8 <\cf7 div \{...other\} className\cf8 =\cf7 \{fancyClass\} \cf8 />\
\
this.props itself is not mutable
\f0\fs30 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \

\fs36 React.createClass \
  
\b0\fs30 - create a component class\
\
  - Setting of properties of components via this.props => passed in when component is initialized. Parent components set the properties of child components \
  - 
\f1\fs24 \cf11 \cb12 a component cannot mutate its 
\f2\fs20 \cf13 \cb14 props
\f1\fs24 \cf11 \cb12  \'97 they are always consistent with what its owner sets them to - This key property leads to UIs that are guaranteed to be consistent.
\f0\fs30 \cf0 \cb1 \
  - Setting of state via - this.setState(\{key: value\}),  => when changed, component is re-rendered\
    
\b - 
\f3\b0 \cf4  updates of your controller\'92s state should affect the HTML, not the other way around.\
    
\f0 \cf0 - Simplify UI dependency by always re-rendering the component. React does it efficiently.\
\pard\pardeftab720\sl260\sa200

\f1\fs24 \cf11 \cb12 The way we are able to figure this out is that React does not manipulate the DOM unless it needs to. 
\b It uses a fast, internal mock DOM to perform diffs and computes the most efficient DOM mutation for you.
\b0 \
The inputs to this component are called 
\f2\fs20 \cf13 \cb14 props
\f1\fs24 \cf11 \cb12  \'97 short for "properties". They're passed as attributes in JSX syntax. You should think of these as immutable within the component, that is, 
\b never write to 
\f4\fs20 \cf13 \cb14 this.props
\f1\b0\fs24 \cf11 \cb12 .\
\pard\pardeftab720\sl260

\b \cf11 Reconciliation is the process by which React updates the DOM with each new render pass.
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f3\fs30 \cf4 \cb1 \

\f0 \cf0 \
 - Overridable methods of the component class\
  - getInitialState\
  - componentDidMount\
  - componentWillUnmount\
  - render - not what you think it is, not actually the dom element or HTML that will be attached to the DOM but a description of it\
\
 - handling events ?\
   - onClick, onChange attributes on the HTML elements used\
\pard\pardeftab720\sl260\sa200

\f1\fs24 \cf11 \cb12 With React you simply pass your event handler as a camelCased prop similar to how you'd do it in normal HTML. React ensures that all events behave identically in IE8 and above by implementing a synthetic event system. That is, React knows how to bubble and capture events according to the spec, and the events passed to your event handler are guaranteed to be consistent with {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/DOM-Level-3-Events/"}}{\fldrslt \cf15 the W3C spec}}, regardless of which browser you're using.\
If you'd like to use React on a touch device such as a phone or tablet, simply call
\f2\fs20 \cf13 \cb14 React.initializeTouchEvents(true);
\f1\fs24 \cf11 \cb12  to enable touch event handling.
\f0\fs30 \cf0 \cb1  \
\pard\pardeftab720\sl260\sa200

\f1\b\fs24 \cf11 \cb12 Autobinding:
\b0  When creating callbacks in JavaScript, you usually need to explicitly bind a method to its instance such that the value of 
\f2\fs20 \cf13 \cb14 this
\f1\fs24 \cf11 \cb12  is correct. With React, every method is automatically bound to its component instance. React caches the bound method such that it's extremely CPU and memory efficient. It's also less typing!\

\b Event delegation:
\b0  React doesn't actually attach event handlers to the nodes themselves. When React starts up, it starts listening for all events at the top level using a single event listener. When a component is mounted or unmounted, the event handlers are simply added or removed from an internal mapping. When an event occurs, React knows how to dispatch it using this mapping. When there are no event handlers left in the mapping, React's event handlers are simple no-ops. To learn more about why this is fast, see {\field{\*\fldinst{HYPERLINK "http://davidwalsh.name/event-delegate"}}{\fldrslt \cf15 David Walsh's excellent blog post}}.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs30 \cf0 \cb1 \
  
\fs24 \
\

\b\fs30 Caveats\

\b0  - Still changing - 0.12 seems to be heading towards 1.0\
 - another step in asset compilation for production - compile JSX to js }